{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Waffle is a framework that lets you use lots of different deep learning tools through just one interface. When it comes to MLOps (machine learning operations), you need to be able to keep up with all the new ideas in deep learning as quickly as possible. But it's hard to do that if you have to write all the code yourself. That's why we started a project to bring together different tools into one framework.</p> <p>Experience the power of multiple deep learning frameworks at your fingertips with Waffle's seamless integration, unlocking limitless possibilities for your machine learning projects.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#install","title":"Install","text":""},{"location":"getting_started/#python","title":"\ud83d\udc0d Python","text":"<p>Waffle has been tested with Python <code>3.9</code>, <code>3.10</code>.  Install any of the above versions you want to use.</p>"},{"location":"getting_started/#pytorch","title":"\ud83d\udd25 PyTorch","text":"<p>Waffle has been tested with pytorch <code>1.13.1</code>.  First, install pytorch and torchvision. See pytorch.org for details.</p>"},{"location":"getting_started/#waffle","title":"\ud83e\uddc7 Waffle","text":"<p>You can install Waffle Hub with pip or from source.</p> PyPI (recommended)GitHub (advanced) <pre><code>pip install -U waffle_hub\n</code></pre> <pre><code>git clone https://github.com/snuailab/waffle_hub.git\ncd waffle_hub\npip install -e .\n</code></pre>"},{"location":"getting_started/#test-your-installation","title":"\ud83d\udee0\ufe0f Test your installation","text":"<pre><code>python -c \"import waffle_hub; print(waffle_hub.__version__)\"\n</code></pre>"},{"location":"blogs/active_learning/","title":"Active Learning","text":""},{"location":"blogs/synthetic_data/","title":"Synthetic Data","text":""},{"location":"tutorials/prepare_dataset/","title":"Prepare Dataset","text":"<p>We provide waffle_utils to help you prepare your dataset. It will be automatically installed if you followed Get Started.</p>"},{"location":"tutorials/prepare_dataset/#download-sample-dataset","title":"Download Sample Dataset","text":"<p>We've made sample dataset with mnist. You can download it with <code>waffle_utils</code>.</p> PythonCLI <pre><code>from waffle_utils.file import io, network\n\nnetwork.get_file_from_url(\n    \"https://raw.githubusercontent.com/snuailab/assets/main/waffle/sample_dataset/mnist.zip\", \n    \"mnist.zip\"\n)\nio.unzip(\"mnist.zip\", \"mnist\", create_directory=True)\n</code></pre> <pre><code>wu get_file_from_url \\\n--url \"https://raw.githubusercontent.com/snuailab/assets/main/waffle/sample_dataset/mnist.zip\" \\\n--file-path \"mnist.zip\"\nwu unzip --file-path \"mnist.zip\" --output-dir \"mnist\"\n</code></pre> <p>You'll see <code>mnist</code> in your current directory. <pre><code>mnist\n\u251c\u2500\u2500 coco.json\n\u2514\u2500\u2500 images\n    \u251c\u2500\u2500 100.png\n    \u251c\u2500\u2500 10.png\n    \u251c\u2500\u2500 11.png\n    \u251c\u2500\u2500 ...\n</code></pre></p>"},{"location":"tutorials/prepare_dataset/#create-dataset","title":"Create Dataset","text":"<p>Waffe Dataset is Object-oriented filesystem based dataset. Creating Dataset makes files and directories in your filesystem. You don't need to know the specific structure of dataset. <code>Dataset</code> will create it for you.</p> <pre><code>datasets/\n\u2514\u2500\u2500 mnist  # dataset name\n    \u251c\u2500\u2500 annotations  # annotation meta files\n    \u251c\u2500\u2500 categories  # category meta files\n    \u251c\u2500\u2500 images  # image meta files\n    \u251c\u2500\u2500 exports  # exported dataset\n    \u251c\u2500\u2500 sets  # dataset split meta files\n    \u2514\u2500\u2500 raw  # raw image files\n</code></pre> <p>There are several ways to create Dataset.</p>"},{"location":"tutorials/prepare_dataset/#1-create-empty-dataset","title":"1. Create empty Dataset","text":"<p>You can create empty Dataset with <code>Dataset.new</code> method.</p> Python <pre><code>from waffle_utils.dataset import Dataset\n\ndataset = Dataset.new(\n    name=\"mnist\"\n)\n</code></pre> Argument Type Description name str Dataset name root_dir str Dataset root directory. Default is <code>datasets</code>"},{"location":"tutorials/prepare_dataset/#2-import-existing-datasets","title":"2. Import Existing Datasets","text":""},{"location":"tutorials/prepare_dataset/#coco-dataset","title":"COCO Dataset","text":"<p>Waffle <code>Dataset</code> supports importing COCO dataset. You can import COCO dataset with <code>Dataset.from_coco</code> method. Following example is importing sample dataset we've downloaded.</p> Python <pre><code>dataset = Dataset.from_coco(\n    name=\"mnist\",\n    coco_file=\"mnist/coco.json\",\n    coco_root_dir=\"mnist/images\",\n)\n</code></pre> Argument Type Description name str Dataset name coco_file str COCO annotation file path coco_root_dir str COCO image root directory Return Type Description dataset Dataset Dataset object"},{"location":"tutorials/prepare_dataset/#yolo-dataset","title":"YOLO Dataset","text":"<p>Comming soon.</p>"},{"location":"tutorials/prepare_dataset/#preprocess-dataset","title":"Preprocess Dataset","text":"<p>After creating <code>Dataset</code>, you can preprocess it by <code>Dataset.split</code>, <code>Dataset.export</code>.</p>"},{"location":"tutorials/prepare_dataset/#1-split-dataset","title":"1. Split Dataset","text":"<p>Waffle Dataset supports split dataset. You can split dataset with <code>Dataset.split</code> method.</p> Python <pre><code>dataset.split(\n    train_ratio=0.8,\n    val_ratio=0.1,\n    test_ratio=0.1,\n    seed=123,\n)\n</code></pre> Argument Type Description train_ratio float Train set ratio val_ratio float Validation set ratio test_ratio float Test set ratio seed int Random seed <p><code>Dataset.split</code> will create <code>train</code>, <code>val</code>, <code>test</code> set in <code>datasets/mnist/sets/</code> directory. Each set file contains image ids.</p> <pre><code>datasets/mnist/sets/\n\u251c\u2500\u2500 test.json\n\u251c\u2500\u2500 train.json\n\u251c\u2500\u2500 unlabeled.json\n\u2514\u2500\u2500 val.json\n</code></pre> <pre><code># train.json\n[26, 40, 82, 87, ...]\n</code></pre>"},{"location":"tutorials/prepare_dataset/#2-export-dataset","title":"2. Export Dataset","text":"<p>Waffle Dataset supports exporting dataset. You can export dataset with <code>Dataset.export</code> method.</p> Python <pre><code>dataset_dir = dataset.export(\n    export_format=\"YOLO_DETECTION\"\n)\n# dataset_dir = \"datasets/mnist/exports/YOLO_DETECTION\"\n</code></pre> Argument Type Description export_format Union[str, Dataset] Export format. You can see supporting formats in <code>Dataset.Format</code> Return Type Description dataset_dir str Exported dataset directory. It can be used as training argument. <p><code>Dataset.export</code> will create specified format dataset in <code>datasets/mnist/exports/[FORMAT]</code> directory.</p> <pre><code>datasets/mnist/exports/YOLO_DETECTION/\n\u251c\u2500\u2500 train\n\u2502   \u251c\u2500\u2500 images\n\u2502   \u2514\u2500\u2500 labels\n\u251c\u2500\u2500 val\n\u2502   \u251c\u2500\u2500 images\n\u2502   \u2514\u2500\u2500 labels\n\u251c\u2500\u2500 test\n\u2502   \u251c\u2500\u2500 images\n\u2502   \u2514\u2500\u2500 labels\n\u2514\u2500\u2500 data.yaml\n</code></pre>"},{"location":"tutorials/hub/","title":"Waffle Hub","text":"<p><code>waffle_hub</code> provides same interface for various powerfull Deep Learning Frameworks. Here is our brief system architecture.</p> <p></p> <p>Each input and output adapter is responsible for converting our interface to the framework's interface. For example, <code>Ultralytics</code> uses <code>imgsz</code> for image size parameter, but <code>detectron2</code> uses <code>IMAGE_SIZE</code>. So, we need to convert our interface to the framework's interface. <code>waffle_hub</code> provides <code>InputAdapter</code> and <code>OutputAdapter</code> for this purpose.</p>"},{"location":"tutorials/hub/#hub","title":"Hub","text":"<p>Waffle Hub is also based on Object-oriented filesystem like Waffle Dataset.</p>"},{"location":"tutorials/hub/#attributes","title":"Attributes","text":"Name Type Description name str Hub name root_dir Path Root Directory task str Task name. model_type str Model Type. model_size str Model Size. backend str Backend name. version str Version classes list[dict] Classes hub_dir Path Hub(Model) Directory artifact_dir Path Artifact Directory. This is raw output of each backend. inference_dir Path Inference Results Directory evaluation_dir Path Evaluation Results Directory export_dir Path Export Results Directory draw_dir Path Draw Results Directory model_config_file Path Model Config yaml File train_config_file Path Train Config yaml File best_ckpt_file Path Best Checkpoint File onnx_file Path Best Checkpoint File last_ckpt_file Path Last Checkpoint File metric_file Path Metric Csv File"},{"location":"tutorials/hub/#support-specifications","title":"Support Specifications","text":"<p>You can find which <code>task</code>, <code>model_type</code>, <code>model_size</code> are available in <code>[BackendName]Hub.MODEL_TYPES</code>.</p> Example <pre><code># UltralyticsHub.MODEL_TYPES\n{\n    task: {\n        model_type: [model_size, ...]\n    }\n}\n\n{\n    \"object_detection\": {\"yolov8\": list(\"nsmlx\")},\n    \"classification\": {\"yolov8\": list(\"nsmlx\")},\n}\n</code></pre>"},{"location":"tutorials/hub/#methods","title":"Methods","text":""},{"location":"tutorials/hub/#new","title":"<code>new</code>","text":"<p>Create new hub.</p> Argument Type Description name str Hub name task str Task name. model_type str Model Type. model_size str Model Size. classes list[dict] Classes root_dir str Root directory of hub repository."},{"location":"tutorials/hub/#load","title":"<code>load</code>","text":"<p>Load existing hub.</p> Argument Type Description name str Hub name root_dir str Root directory of hub repository."},{"location":"tutorials/hub/#from_model_config","title":"<code>from_model_config</code>","text":"<p>Create new hub from model config.</p> Argument Type Description name str Hub name model_config_file str Model config file path root_dir str Root directory of hub repository."},{"location":"tutorials/hub/callbacks/","title":"Callbacks","text":"<p>Each <code>train</code>, <code>inference</code>, <code>evaluation</code>, <code>export</code> job will return <code>Callback</code> object. <code>Callback</code> object has several methods to get information about job. Basically, Every <code>Callback</code> class inherits <code>ThreadProgressCallback</code> class.</p>"},{"location":"tutorials/hub/callbacks/#threadprogresscallback","title":"ThreadProgressCallback","text":""},{"location":"tutorials/hub/callbacks/#attributes","title":"Attributes","text":"<p>None</p>"},{"location":"tutorials/hub/callbacks/#methods","title":"Methods","text":""},{"location":"tutorials/hub/callbacks/#__init__","title":"<code>__init__</code>","text":"<p>Initialize <code>ThreadProgressCallback</code> object.</p> Argument Type Description total_steps int Total steps"},{"location":"tutorials/hub/callbacks/#get_progress","title":"<code>get_progress</code>","text":"<p>Get progress of job.</p> Return Type Description progress float Progress (0 ~ 1)"},{"location":"tutorials/hub/callbacks/#is_finished","title":"<code>is_finished</code>","text":"<p>Check if job is finished.</p> Return Type Description is_finished bool If job is finished"},{"location":"tutorials/hub/callbacks/#get_remaining_time","title":"<code>get_remaining_time</code>","text":"<p>Get remaining time of job.</p> Return Type Description remaining_time float Remaining time (second)"},{"location":"tutorials/hub/callbacks/#update","title":"<code>update</code>","text":"<p>Update progress of job.</p> Argument Type Description step int Current step"},{"location":"tutorials/hub/callbacks/#register_thread","title":"<code>register_thread</code>","text":"<p>Register thread to <code>ThreadProgressCallback</code> object.</p> Argument Type Description thread threading.Thread Thread to register"},{"location":"tutorials/hub/callbacks/#start","title":"<code>start</code>","text":"<p>Start thread.</p>"},{"location":"tutorials/hub/callbacks/#join","title":"<code>join</code>","text":"<p>Join thread.</p>"},{"location":"tutorials/hub/callbacks/#force_finish","title":"<code>force_finish</code>","text":"<p>Make job finished.</p>"},{"location":"tutorials/hub/callbacks/#traincallback","title":"TrainCallback","text":"<p>Return object of <code>Hub.train</code> method.</p>"},{"location":"tutorials/hub/callbacks/#attributes_1","title":"Attributes","text":"Name Type Description best_ckpt_file str Best checkpoint file path last_ckpt_file str Last checkpoint file path result_dir str Result directory path metric_file str Metric file path"},{"location":"tutorials/hub/callbacks/#methods_1","title":"Methods","text":""},{"location":"tutorials/hub/callbacks/#__init___1","title":"<code>__init__</code>","text":"<p>Initialize <code>TrainCallback</code> object.</p> Argument Type Description total_steps int Total steps get_metric_func Callable Function to get metric"},{"location":"tutorials/hub/callbacks/#get_metrics","title":"<code>get_metrics</code>","text":"<p>Get metrics.</p> Return Type Description metrics list[list[dict]] Metrics Example <pre><code>[\n    [\n        {'tag': 'loss', 'value': 0.123}, \n        {'tag': 'accuracy', 'value': 0.987},\n        ...\n    ],  # epoch 1\n    [],  # epoch 2\n    ...\n]\n</code></pre>"},{"location":"tutorials/hub/callbacks/#inferencecallback","title":"InferenceCallback","text":"<p>Return object of <code>Hub.inference</code> method.</p>"},{"location":"tutorials/hub/callbacks/#attributes_2","title":"Attributes","text":"Name Type Description inference_dir str Inference directory path draw_dir str Draw directory path"},{"location":"tutorials/hub/callbacks/#evaluationcallback","title":"EvaluationCallback","text":"<p>None</p>"},{"location":"tutorials/hub/callbacks/#exportcallback","title":"ExportCallback","text":"<p>Return object of <code>Hub.export</code> method.</p>"},{"location":"tutorials/hub/callbacks/#attributes_3","title":"Attributes","text":"Name Type Description export_file str Exported file path"},{"location":"tutorials/hub/export/","title":"Export","text":"<p>After you train <code>Hub</code>, you can now export it using <code>Hub.export</code> method.</p> Python <pre><code>from waffle_hub.hub.adapter.ultralytics import UltralyticsHub\n\nexport_callback = hub.export(\n    image_size=None,\n    batch_size=16,\n    opset_version=11,\n    hold=True\n)\n</code></pre> Argument Type Description image_size int export image size. None for same with train_config (recommended). batch_size int max batch size. opset_version int opset version. hold bool hold export. This is an arguement for people using waffle as a SDK. If it is <code>False</code>, it will be excecuted by a thread.` Return Type Description callback ExportCallback Callback object"},{"location":"tutorials/hub/inference/","title":"Inference","text":"<p>After you train <code>Hub</code>, you can now inference it using <code>Hub.inference</code> method.</p> Python <pre><code>from waffle_hub.hub.adapter.ultralytics import UltralyticsHub\n\nhub = UltralyticsHub.load(\"digit_detector\")\ninference_callback = hub.inference(\n    source=\"mnist/images\",\n    recursive=True,\n    image_size=None,\n    letter_box=None,\n    batch_size=16,\n    confidence_threshold=0.25,\n    iou_threshold=0.45,\n    half=False,\n    workers=2,\n    device=\"0\",\n    draw=True,\n    hold=True\n)\n</code></pre> Argument Type Description source str dataset source. image file or image directory. recursive bool get images from directory recursively. Defaults to True. image_size int inference image size. None for same with train_config (recommended). letter_box bool letter box inference image. None for same with train_config (recommended). batch_size int batch size. confidence_threshold float confidence threshold. iou_threshold float iou threshold.(for object_detection) half bool use half precision. workers int number of workers for dataloader. device str device to inference. draw bool draw inference result. hold bool hold inference. This is an arguement for people using waffle as a SDK. If it is <code>False</code>, it will be excecuted by a thread. Return Type Description callback InferenceCallback Callback object"},{"location":"tutorials/hub/train/","title":"Train","text":"<p>After you create <code>Hub</code>, you can train it using <code>Hub.train</code> method. As creating <code>Hub</code>, we provide same interface for training. Following example is training with <code>UltralyticsHub</code> and Sample Dataset we've created.</p> Python <pre><code>from waffle_hub.hub.adapter.ultralytics import UltralyticsHub\n\nhub = UltralyticsHub.load(\"digit_detector\")\ntrain_callback = hub.train(\n    dataset_path=\"datasets/mnist/exports/YOLO_DETECTION\",\n    epochs=10,\n    batch_size=16,\n    image_size=320,\n    device=\"0\",\n    workers=2,\n    seed=0,\n    hold=True\n)\n</code></pre> Argument Type Description dataset_path str Dataset path. Result of <code>Dataset.export</code>. epochs int Number of epochs batch_size int Batch size image_size int Image size device str Device to train workers int Number of workers seed int Random seed hold bool Hold training. This is an arguement for people using waffle as a SDK. If it is <code>False</code>, it will be excecuted by a thread. Return Type Description callback TrainCallback Callback object"}]}